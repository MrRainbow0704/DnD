// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
)

const getCharacter = `-- name: GetCharacter :one
SELECT id, owner, name, race, background, alignment, experience, strenght_prof, dexterity_prof, constitution_prof, intelligence_prof, wisdom_prof, charisma_prof, armor_class, max_hp, current_hp, temp_hp, death_success, death_fail, proficencies, equipment, coins_copper, coins_silver, coins_electrum, coins_gold, coins_platinum, personality, ideals, bonds, flaws
FROM characters
WHERE id = ?1
LIMIT 1
`

// GetCharacter
//
//	SELECT id, owner, name, race, background, alignment, experience, strenght_prof, dexterity_prof, constitution_prof, intelligence_prof, wisdom_prof, charisma_prof, armor_class, max_hp, current_hp, temp_hp, death_success, death_fail, proficencies, equipment, coins_copper, coins_silver, coins_electrum, coins_gold, coins_platinum, personality, ideals, bonds, flaws
//	FROM characters
//	WHERE id = ?1
//	LIMIT 1
func (q *Queries) GetCharacter(ctx context.Context, id int64) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Race,
		&i.Background,
		&i.Alignment,
		&i.Experience,
		&i.StrenghtProf,
		&i.DexterityProf,
		&i.ConstitutionProf,
		&i.IntelligenceProf,
		&i.WisdomProf,
		&i.CharismaProf,
		&i.ArmorClass,
		&i.MaxHp,
		&i.CurrentHp,
		&i.TempHp,
		&i.DeathSuccess,
		&i.DeathFail,
		&i.Proficencies,
		&i.Equipment,
		&i.CoinsCopper,
		&i.CoinsSilver,
		&i.CoinsElectrum,
		&i.CoinsGold,
		&i.CoinsPlatinum,
		&i.Personality,
		&i.Ideals,
		&i.Bonds,
		&i.Flaws,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, passwd, salt, role
FROM users
WHERE id = ?1
LIMIT 1
`

// GetUser
//
//	SELECT id, name, passwd, salt, role
//	FROM users
//	WHERE id = ?1
//	LIMIT 1
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Passwd,
		&i.Salt,
		&i.Role,
	)
	return i, err
}

const getUserFromName = `-- name: GetUserFromName :one
SELECT id, name, passwd, salt, role
FROM users
WHERE name = ?1
LIMIT 1
`

// GetUserFromName
//
//	SELECT id, name, passwd, salt, role
//	FROM users
//	WHERE name = ?1
//	LIMIT 1
func (q *Queries) GetUserFromName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Passwd,
		&i.Salt,
		&i.Role,
	)
	return i, err
}

const newCharacter = `-- name: NewCharacter :one
INSERT INTO characters (owner, name)
VALUES (
        ?1,
        ?2
    )
RETURNING id, owner, name, race, background, alignment, experience, strenght_prof, dexterity_prof, constitution_prof, intelligence_prof, wisdom_prof, charisma_prof, armor_class, max_hp, current_hp, temp_hp, death_success, death_fail, proficencies, equipment, coins_copper, coins_silver, coins_electrum, coins_gold, coins_platinum, personality, ideals, bonds, flaws
`

// NewCharacter
//
//	INSERT INTO characters (owner, name)
//	VALUES (
//	        ?1,
//	        ?2
//	    )
//	RETURNING id, owner, name, race, background, alignment, experience, strenght_prof, dexterity_prof, constitution_prof, intelligence_prof, wisdom_prof, charisma_prof, armor_class, max_hp, current_hp, temp_hp, death_success, death_fail, proficencies, equipment, coins_copper, coins_silver, coins_electrum, coins_gold, coins_platinum, personality, ideals, bonds, flaws
func (q *Queries) NewCharacter(ctx context.Context, owner int64, name string) (Character, error) {
	row := q.db.QueryRowContext(ctx, newCharacter, owner, name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Race,
		&i.Background,
		&i.Alignment,
		&i.Experience,
		&i.StrenghtProf,
		&i.DexterityProf,
		&i.ConstitutionProf,
		&i.IntelligenceProf,
		&i.WisdomProf,
		&i.CharismaProf,
		&i.ArmorClass,
		&i.MaxHp,
		&i.CurrentHp,
		&i.TempHp,
		&i.DeathSuccess,
		&i.DeathFail,
		&i.Proficencies,
		&i.Equipment,
		&i.CoinsCopper,
		&i.CoinsSilver,
		&i.CoinsElectrum,
		&i.CoinsGold,
		&i.CoinsPlatinum,
		&i.Personality,
		&i.Ideals,
		&i.Bonds,
		&i.Flaws,
	)
	return i, err
}

const newUser = `-- name: NewUser :one
INSERT INTO users (name, passwd, salt)
VALUES (
        ?1,
        ?2,
        ?3
    )
RETURNING id, name, passwd, salt, role
`

// NewUser
//
//	INSERT INTO users (name, passwd, salt)
//	VALUES (
//	        ?1,
//	        ?2,
//	        ?3
//	    )
//	RETURNING id, name, passwd, salt, role
func (q *Queries) NewUser(ctx context.Context, name string, passwd []byte, salt []byte) (User, error) {
	row := q.db.QueryRowContext(ctx, newUser, name, passwd, salt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Passwd,
		&i.Salt,
		&i.Role,
	)
	return i, err
}

const setUserAdmin = `-- name: SetUserAdmin :one
UPDATE users
SET role = "admin"
WHERE id = ?1
RETURNING id, name, passwd, salt, role
`

// SetUserAdmin
//
//	UPDATE users
//	SET role = "admin"
//	WHERE id = ?1
//	RETURNING id, name, passwd, salt, role
func (q *Queries) SetUserAdmin(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserAdmin, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Passwd,
		&i.Salt,
		&i.Role,
	)
	return i, err
}
